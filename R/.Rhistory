sep = "\n")) +
theme(plot.title = element_text(face = "bold"),
plot.subtitle = element_text(face = "italic", size = 9.5,
lineheight = unit(1.25, "cm")),
axis.title.x = element_text(margin = margin(t = 10, b = 7)),
axis.title.y = element_text(margin = margin(l = 10, r = 7)),
axis.ticks = element_blank())
ggplot(data = impression.funnel,
mapping = aes(x = mouseovers, y = clicks)) +
geom_tile(mapping = aes(fill = count)) +
scale_fill_gradient(low = "beige", high = "red", guide = "none") +
geom_text(aes(label = count %>% comma)) +
facet_grid(viewable ~ .) +
labs(x = "Per-impression mouseover count",
y = "Per-impression click count",
title = "Clickthrough rates over ad impression lifetime",
subtitle = paste("Our values support our prior: a small minority of",
"ads are ever hovered, and even fewer are clicked on",
sep = "\n")) +
theme(plot.title = element_text(face = "bold"),
plot.subtitle = element_text(face = "italic", size = 9.5,
lineheight = unit(1.25, "cm")),
axis.title.x = element_text(margin = margin(t = 10, b = 7)),
axis.title.y = element_text(margin = margin(l = 10, r = 7)),
axis.ticks.x = element_blank())
ggplot(data = impression.funnel,
mapping = aes(x = mouseovers, y = clicks)) +
geom_tile(mapping = aes(fill = count)) +
scale_fill_gradient(low = "beige", high = "red", guide = "none") +
geom_text(aes(label = count %>% comma)) +
facet_grid(viewable ~ .) +
labs(x = "Per-impression mouseover count",
y = "Per-impression click count",
title = "Clickthrough rates over ad impression lifetime",
subtitle = paste("Our values support our prior: a small minority of",
"ads are ever hovered, and even fewer are clicked on",
sep = "\n")) +
theme(plot.title = element_text(face = "bold"),
plot.subtitle = element_text(face = "italic", size = 9.5,
lineheight = unit(1.25, "cm")),
axis.title.x = element_text(margin = margin(t = 10, b = 7)),
axis.title.y = element_text(margin = margin(l = 10, r = 7)))
ggplot(data = impression.funnel,
mapping = aes(x = mouseovers, y = clicks)) +
geom_tile(mapping = aes(fill = count)) +
scale_fill_gradient(low = "beige", high = "red", guide = "none") +
geom_text(aes(label = count %>% comma)) +
facet_grid(viewable ~ .) +
labs(x = "Per-impression mouseover count",
y = "Per-impression click count",
title = "Clickthrough rates over ad impression lifetime",
subtitle = paste("Our values support our prior: a small minority of",
"ads are ever hovered, and even fewer are clicked on",
sep = "\n")) +
theme(plot.title = element_text(face = "bold"),
plot.subtitle = element_text(face = "italic", size = 9.5,
lineheight = unit(1.25, "cm")),
axis.title.x = element_text(margin = margin(t = 10, b = 7)),
axis.title.y = element_text(margin = margin(l = 10, r = 7)))
impressions.vs.clicks <-
data %>%
select(campaign, clicks) %>%
group_by(campaign) %>%
summarize(
impression.count = n(),
clickthrough.rate = (sum(clicks, na.rm = T) / impression.count)
) %>%
ungroup()
# Plot impression counts against clickthrough rate
# on a per-campaign resolution.
ggplot(data = impressions.vs.clicks,
mapping = aes(x = impression.count, y = clickthrough.rate)) +
geom_line() +
scale_x_log10(labels = 10^(0:6) %>% comma, breaks = 10^(0:6)) +
scale_y_continuous(labels = percent) +
stat_smooth() +
labs(x = "Impression count",
y = "Clickthrough rate",
title = "Impressions aren't everything",
subtitle = paste("No significant relationship between impression",
"count and advertisement clickthrough rate", sep = "\n")
) +
theme(plot.title = element_text(face = "bold"),
plot.subtitle = element_text(face = "italic", size = 9.5,
lineheight = unit(1.25, "cm")))
randomForest()
?randomForest
ggplot(data = impressions.vs.clicks,
mapping = aes(x = impression.count, y = clickthrough.rate)) +
geom_line() +
scale_x_log10(labels = 10^(0:6) %>% comma, breaks = 10^(0:6)) +
scale_y_continuous(labels = percent) +
stat_smooth() +
labs(x = "Impression count",
y = "Clickthrough rate",
title = "Impressions aren't everything",
subtitle = paste("No significant relationship between impression",
"count and advertisement clickthrough rate", sep = "\n")) +
theme(plot.title = element_text(face = "bold"),
plot.subtitle = element_text(face = "italic", size = 9.5,
lineheight = unit(1.25, "cm")),
axis.title.x = element_text(margin = margin(t = 10, b = 7)),
axis.title.y = element_text(margin = margin(l = 10, r = 7)))
mean((test$predicted.clickthrough.rate - test$clickthrough.rate)^2, na.rm = TRUE) %>%
sqrt %>%
percent
# Some behind-the-curtains setup
library(knitr)
library(randomForest)
library(scales)
library(ggthemes)
library(tidyverse)
library(lubridate)
library(caret)
library(dummies)
library(data.table)
knitr::opts_chunk$set(
cache = TRUE,
warning = FALSE,
message = FALSE,
dpi = 180,
comment = "#>",
collapse = TRUE
)
options(width = 75)
theme_set(theme_minimal(base_family = "Menlo") +
theme(plot.title=element_text(family = "Menlo")))
# Read in our data
data <- data.table::fread("../data-code-test/master.csv", sep = "|")
# NOTE: The instructions say to ignore the `is_adserver` column.
data[, is_adserver := NULL]
# Get the head of our dataset
data %>% head
# Get the tail, too.
data %>% tail
# Grouping by timestamp, return count for each entry.
data[, .N, .(timestamp)] %>%
slice(c(1:4, (n()-4):n()))
# Do some preprocessing to get our column format right.
# For all rows, change timestamp to POSIXct format,
# region and country to factors (not character).
data[, c("timestamp", "region", "country") := .(
lubridate::ymd_hms(timestamp),
as.factor(region),
as.factor(country))
]
# Summarize each column.
data %>% summary
# Group all data into whether it was viewable,
# moused-over, and clicked. This gives us
# 2^3 different subgroup configurations.
impression.funnel <- data %>%
select(viewable, mouseovers, clicks) %>%
group_by(viewable, mouseovers, clicks) %>%
summarize(count = n()) %>%
ungroup() %>%
mutate(viewable = ifelse(viewable == 1, "Viewable", "Not viewable"),
mouseovers = ifelse(mouseovers == 1, "Mouse over", "Mouse not over"),
clicks = ifelse(clicks == 1, "Clicked", "Did not click")) %>%
mutate_at(.cols = vars(viewable, mouseovers, clicks),
.funs = funs(as.factor))
# Plot our heatmap that'll show how click counts
# change across viewable vs non-viewable ads.
ggplot(data = impression.funnel,
mapping = aes(x = mouseovers, y = clicks)) +
geom_tile(mapping = aes(fill = count)) +
scale_fill_gradient(low = "beige", high = "red", guide = "none") +
geom_text(aes(label = count %>% comma)) +
facet_grid(viewable ~ .) +
labs(x = "Per-impression mouseover count",
y = "Per-impression click count",
title = "Clickthrough rates over ad impression lifetime",
subtitle = paste("Our values support our prior: a small minority of",
"ads are ever hovered, and even fewer are clicked on",
sep = "\n")) +
theme(plot.title = element_text(face = "bold"),
plot.subtitle = element_text(face = "italic", size = 9.5,
lineheight = unit(1.25, "cm")),
axis.title.x = element_text(margin = margin(t = 10, b = 7)),
axis.title.y = element_text(margin = margin(l = 10, r = 7)))
# Determine clickthrough rate on a per-campaign resolution.
impressions.vs.clicks <-
data %>%
select(campaign, clicks) %>%
group_by(campaign) %>%
summarize(
impression.count = n(),
clickthrough.rate = (sum(clicks, na.rm = T) / impression.count)
) %>%
ungroup()
# Plot campaign impression counts against clickthrough rate.
ggplot(data = impressions.vs.clicks,
mapping = aes(x = impression.count, y = clickthrough.rate)) +
geom_line() +
scale_x_log10(labels = 10^(0:6) %>% comma, breaks = 10^(0:6)) +
scale_y_continuous(labels = percent) +
stat_smooth() +
labs(x = "Impression count",
y = "Clickthrough rate",
title = "Impressions aren't everything",
subtitle = paste("No significant relationship between impression",
"count and advertisement clickthrough rate", sep = "\n")) +
theme(plot.title = element_text(face = "bold"),
plot.subtitle = element_text(face = "italic", size = 9.5,
lineheight = unit(1.25, "cm")),
axis.title.x = element_text(margin = margin(t = 10, b = 7)),
axis.title.y = element_text(margin = margin(l = 10, r = 7)))
# Quick check on what campaigns had above 100,000 impresssions.
impressions.vs.clicks %>%
filter(impression.count > 1e5) %>%
arrange(desc(clickthrough.rate)) %>%
mutate(clickthrough.rate = clickthrough.rate %>% percent) %>%
filter(row_number() == 1 | row_number() == n())
# First, group our data so we're looking at per-campaign clickthrough rate.
campaigns <- data %>%
select(campaign, clicks) %>%
group_by(campaign) %>%
summarize(
impression.count = n(),
clickthrough.rate = (sum(clicks, na.rm = T) / impression.count)
) %>%
ungroup(campaign)
# Set our random generation seed, requested sample size,
# and extract the indices we'd like in our training set.
set.seed(123)
sample_size <- floor(0.70 * nrow(campaigns))
train_indices <- sample(seq_len(nrow(campaigns)), size = sample_size)
# Isolate our training vs test data sets.
train <- campaigns[train_indices, ]
test <- campaigns[-train_indices, ]
# Determine mean we'll use to predict new values.
train.clickthrough.mean <- mean(campaigns$clickthAjrough.rate)
# Assign new column to test in order to compute MSE
test <- test %>%
mutate(predicted.clickthrough.rate = train.clickthrough.mean)
# Compute MSE, then Root MSE, and output as MSE.
mean((test$predicted.clickthrough.rate - test$clickthrough.rate)^2, na.rm = TRUE) %>%
sqrt %>%
percent
# Determine mean we'll use to predict new values.
train.clickthrough.mean <- mean(campaigns$clickthrough.rate)
# Assign new column to test in order to compute MSE
test <- test %>%
mutate(predicted.clickthrough.rate = train.clickthrough.mean)
# Compute MSE, then Root MSE, and output as MSE.
mean((test$predicted.clickthrough.rate - test$clickthrough.rate)^2, na.rm = TRUE) %>%
sqrt %>%
percent
x <- runif(n = 100, min = 1, max = 80)
x
predict(x)
predict(Model, x)
predict(lm, x)
predict.lm(x)
predict.lm(x ~ x)
predict(x ~ x)
predict(x ~ .)
predict(lm(x))
predict(lm(x ~ .))
predict(lm(~x))
install.packages("swirl")
swirl()
swirl::swirl()
x <- 1; y <- 2
y
install.packages("fivethirtyeight")
library(fivethirtyeight)
fivethirtyeight::unisex_names
fivethirtyeight::bob_ross
fivethirtyeight::airline_safety
fivethirtyeight::biopics
ls()
ls(getwd())
fivethirtyeight::trump_twitter
library(sparklyr)
library(dplyr)
sc <- spark_connect(master = "local")
spark_install()
sc <- spark_connect(master = "local")
spark_read_csv("~/Documents/github-projects/exploratorium/NYC-Restaurants/data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv")
spark_read_csv(sc, name = results, path = "~/Documents/github-projects/exploratorium/NYC-Restaurants/data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv")
spark_read_csv(sc, path = "~/Documents/github-projects/exploratorium/NYC-Restaurants/data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv")
spark_read_csv(sc, name = "~/Documents/github-projects/exploratorium/NYC-Restaurants/data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv")
spark_read_csv(sc, name = "results", path = "~/Documents/github-projects/exploratorium/NYC-Restaurants/data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv")
results
spark_read_csv(sc, name = "results", path = "~/Documents/github-projects/exploratorium/NYC-Restaurants/data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv") %>%
filter(DBA == "AJI SUSHI")
results <- copy_to(sc, results, "results")
results <- copy_to(sc, "results", "results")
results <- copy_to(sc, results, results)
results <- copy_to(sc, results)
results <- copy_to(sc, "results")
inspections <- copy_to(sc, inspections, "results")
inspections <- copy_to(sc, results, "inspections")
inspections <- copy_to(sc, "results", "inspections")
inspections <- copy_to(sc, inspections, "results")
inspections <- copy_to(sc, inspections, results)
sparklyr::copy_to(sc, results, "inspections")
inspections <- sparklyr::copy_to(sc, inspections, "inspections")
inspections <- sparklyr::copy_to(sc, inspections, results)
inspections <- sparklyr::copy_to(sc, "results", inspections)
inspections <- sparklyr::copy_to(dest = sc, df = results, name = "inspections")
install.packages("nycflights13")
library(nycflights13)
flights <- copy_to(sc, flights, "flights")
results %>% n()
airlines <- copy_to(sc, airlines, "airlines")
results <- copy_to(sc, results, "results")
spark_installed_versions()
spark_uninstall()
spark_uninstall(version = "1.6.2")
spark_uninstall(version = "1.6.2", hadoop_version = "2.6")
spark_installed_versions()
spark_available_versions()
spark_install(version = "2.0.0", hadoop = "2.7")
rm(list = ls(all = T))
runif(n = 100, min = 99000, max = 100000)
library(dplyr)
runif(n = 100, min = 99000, max = 100000) %>% plot
data <- data.frame(x = seq(1, 100, 1), y = runif(n = 100, min = 99000, max = 100000))
data
plot(data)
plot(data)
library(ggplot)
library(ggplot2)
ggplot(data, aes(x = x, y = y)) + lims(y = c(80000, 500000))
ggplot(data, aes(x = x, y = y)) + geom_point() + lims(y = c(80000, 500000))
ggplot(data, aes(x = seq(1, 100, 1), y = runif(n = 100, min = 90000, max = 105000))) + geom_line() + lims(y = c(80000, 500000))
install.packages("janeaustenr")
install.packages("tidytext")
library(janeaustenr)
library(dplyr)
austen_books()
original_books <- austen_books() %>%
group_by(book) %>%
mutate(lines = n())
original_books
original_books <- austen_books() %>%
group_by(book) %>%
mutate(lines = n()) %>%
filter(row_number() == 1)
original_books
austen_books()
library(tidyverse)
library(tidytext)
austen_books() %>%
unnest_tokens(input = text, output = word)
austen_books() %>%
group_by(book) %>%
mutate(line.no = row_number()) %>%
ungroup() %>%
unnest_tokens(input = text, output = word)
install.packages("rvest")
library(rvest)
ggplot.2.page <- read_html("https://cran.r-project.org/web/packages/ggplot2/index.html")
library(tidyverse)
ggplot.2.page %>%
rvest::minimal_html
ggplot.2.page %>%
rvest::html_nodes("a")
ggplot.2.page %>% html_nodes("a")
ggplot.2.page %>% html_nodes("a") %>% data.frame
ggplot.2.page %>% html_nodes("a") %>% html_text()
ggplot.2.page %>% html_nodes("a") %>% html_attr("a")
ggplot.2.page %>% html_nodes("a")
ggplot.2.page %>% html_nodes("tr")
(ggplot.2.page %>% html_nodes("tr"))[2]
(ggplot.2.page %>% html_nodes("tr"))[3]
(ggplot.2.page %>% html_nodes("tr"))[3] %>% stringr::str_split("<a")
(ggplot.2.page %>% html_nodes("tr"))[3] %>% stringr::str_split("<a ")
install.packages("ggraph")
library(ggraph)
library(igraph)
library(tidyverse)
graph <- graph_from_data_frame(highschool)
highschool
igraph::V(graph, mode = 'in')
igraph::V(graph)
igraph::V(graph = graph)
V(graph)$Popularity <- degree(graph, mode = 'in')
V(graph)
V(graph)$Popularity
ggraph(graph, layout = 'kk') +
geom_edge_fan(aes(alpha = ..index..), show.legend = FALSE) +
geom_node_point(aes(size = Popularity)) +
facet_edges(~year) +
theme_graph(foreground = 'steelblue', fg_text_colour = 'white')
ggplot() + geom_line(mapping = aes(x = 1:10, y = 1:10))
ggplot() + geom_line(mapping = aes(x = 0:11, y = dpois(x = 0:10, lambda = 100 * (1/36))))
ggplot() + geom_line(mapping = aes(x = 0:11, y = dpois(x = 0:11, lambda = 100/36)))
ggplot() + geom_line(mapping = aes(x = 0:11, y = dpois(x = 0:11, lambda = 100/36)))
ggplot() + geom_line(mapping = aes(x = 0:11, y = dpois(x = 0:11, lambda = 100/36)))
ggplot() + geom_line(mapping = aes(x = 0:11, y = dpois(x = 0:11, lambda = 100/36))) + geom_line(mapping = aes(x = 0:11, y = dbinom(x = 0:11, size = 100, prob = 1/36)))
ggplot() + geom_line(mapping = aes(x = 0:11, y = dpois(x = 0:11, lambda = 100/36))) + geom_line(mapping = aes(x = 0:11, y = dbinom(x = 0:11, size = 100, prob = 1/36)))
ggplot() + geom_line(mapping = aes(x = 0:11, y = dpois(x = 0:11, lambda = 1000/36))) + geom_line(mapping = aes(x = 0:11, y = dbinom(x = 0:11, size = 1000, prob = 1/36)))
ggplot() + geom_line(mapping = aes(x = 0:11, y = dpois(x = 0:11, lambda = 100/360))) + geom_line(mapping = aes(x = 0:11, y = dbinom(x = 0:11, size = 100, prob = 1/360)))
ggplot() + geom_line(mapping = aes(x = 0:11, y = dpois(x = 0:11, lambda = 1000/360))) + geom_line(mapping = aes(x = 0:11, y = dbinom(x = 0:11, size = 1000, prob = 1/360)))
ggplot() + geom_line(mapping = aes(x = 0:11, y = dpois(x = 0:11, lambda = 100/360))) + geom_line(mapping = aes(x = 0:11, y = dbinom(x = 0:11, size = 100, prob = 1/360)))
rpois(n = 10, lambda = 25)
rpois(n = 10, lambda = 25) / 100
plot(rpois(n = 25, lambda = 25) / 100)
plot(rpois(n = 25, lambda = 25) / 100)
plot(rpois(n = 25, lambda = 25) / 100)
plot(rpois(n = 25, lambda = 25) / 100)
plot(rpois(n = 25, lambda = 25) / 100)
plot(rpois(n = 25, lambda = 25) / 100)
plot(rpois(n = 25, lambda = 25) / 100)
plot(rpois(n = 25, lambda = 25) / 100)
plot(rpois(n = 25, lambda = 25) / 100)
plot(rpois(n = 25, lambda = 25) / 100)
plot(rpois(n = 25, lambda = 25) / 100)
plot(rpois(n = 25, lambda = 25) / 100)
help("gamma")
factorial(1)
factorial(10)
help(gamma)
?gamma
install.packages("rjags")
install.packages("runjags")
?"?"
x <- 0.5 - 0.3
y <- 0.3 - 0.1
x == y
all.equal(x, y)
x == 0.2
y == 0.2
y
?aggregate
library(tidyverse)
library(reshape2)
data <- readr::read_csv("../data/master.csv", col_types = "iccccc")
# complaints_by_borough <-
boroughs <-
data %>%
select(id, column_name, value) %>%
filter(column_name == 'Borough')
setwd("~/Documents/courses/spring-2017/big-data/bigDataProject/R")
library(tidyverse)
library(reshape2)
data <- readr::read_csv("../data/master.csv", col_types = "iccccc")
boroughs <-
data %>%
select(id, column_name, value) %>%
filter(column_name == 'Borough')
complaints_by_borough <-
data %>%
select(id, column_name, value) %>%
filter(column_name == 'Complaint Type') %>%
inner_join(boroughs, by = "id") %>%
group_by(value.y, value.x) %>%
summarize(group_size = n()) %>%
top_n(10) %>%
ungroup() %>%
arrange(group_size %>% desc) %>%
filter(row_number() < 100) %>%
mutate(
value.x = stringr::str_to_title(value.x),
value.y = stringr::str_to_title(value.y)
) %>%
ggplot(mapping = aes(x = value.x, y = group_size)) +
geom_bar(stat = "identity", width = 0.575) +
facet_grid(value.y ~ .) +
scale_y_log10(labels = scales::comma) +
labs(x = "Complaint type", y = "Number of complaints",
title = "Top 10 complaints across all boroughs") +
theme(
axis.text.x = element_text(angle = 50, hjust = 1),
panel.grid.minor.y = element_blank()
)
complaints_by_borough
complaints_by_borough <-
data %>%
select(id, column_name, value) %>%
filter(column_name == 'Complaint Type') %>%
inner_join(boroughs, by = "id") %>%
group_by(value.y, value.x) %>%
summarize(group_size = n()) %>%
top_n(10) %>%
ungroup() %>%
arrange(group_size %>% desc) %>%
filter(row_number() < 100) %>%
mutate(
value.x = stringr::str_to_title(value.x),
value.y = stringr::str_to_title(value.y)
) %>%
ggplot(mapping = aes(x = value.x, y = group_size)) +
geom_bar(stat = "identity", width = 0.575) +
facet_grid(value.y ~ .) +
scale_y_log10(labels = scales::comma) +
labs(x = "Complaint type", y = "Number of complaints",
title = "Top 10 complaints across all boroughs",
caption = "Plot output of complaints-by-borough.R") +
theme(
axis.text.x = element_text(angle = 50, hjust = 1),
panel.grid.minor.y = element_blank()
)
complaints_by_borough
plot <-
data %>%
complete(nesting(column_name), base_type,
fill = list(frequency_percentile = 0)) %>%
ggplot(mapping = aes(x = column_name, y = frequency_percentile)) +
geom_bar(stat = "identity", position = "dodge",
alpha = 95/100, width = 0.575) +
facet_grid(. ~ base_type,
labeller = labeller(base_type_order = label_wrap_gen(5))) +
labs(x = "Column name", y = "Base type percentile",
caption = "Plot output by base-type-percentile.R") +
theme(axis.text.x = element_text(angle = 55, hjust = 1),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()) +
coord_flip()
